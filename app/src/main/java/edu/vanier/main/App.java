/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.vanier.main;

import com.sun.prism.impl.DisposerManagedResource;
import java.util.ArrayList;
import java.util.Collections;
import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Shape;
import javafx.stage.Stage;

public class App extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception {

        FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/Map.fxml"));
        loader.setController(new FXMLController());
        Pane root = loader.load();
        Scene scene = new Scene(root, 1200, 900, Color.WHITE);
        primaryStage.setScene(scene);
        primaryStage.show();
        Car car1 = new Car(root);

        ArrayList<Shape> dangers = new ArrayList<>();

        for (int i = 0; i < root.getChildren().size(); i++) {

            Node node = root.getChildren().get(i);
            if (!Circle.class.isInstance(node) && !Sensor.class.isInstance(node)) {

                dangers.add((Shape) root.getChildren().get(i));

            }

        }
        VBox sensors = new VBox();

        for (int i = 0; i < car1.sensors.length; i++) {
            Label label = new Label();
            Sensor sensor = car1.sensors[i];
            label.textProperty().bind(Bindings.createStringBinding(() -> String.valueOf(sensor.projectedLength.get()), car1.sensors[i].projectedLength));
            sensors.getChildren().add(label);

        }

        root.getChildren().add(sensors);

        AnimationTimer timer = new AnimationTimer() {
            @Override
            public void handle(long now) {

                car1.setCenterX(car1.getCenterX() + 0.1);

                for (int i = 0; i < car1.sensors.length; i++) {
                    Sensor cSensor = car1.sensors[i];
                    boolean touched = false;
                    ArrayList<Double> intersections = new ArrayList<>();

                    for (int j = 0; j < dangers.size(); j++) {
                        Shape shape = Shape.intersect(cSensor, dangers.get(j));
                        if (shape.getBoundsInParent().getWidth() != -1) {

                            double projected = Math.sqrt(Math.pow((shape.getBoundsInParent().getCenterX() - car1.getCenterX()), 2) + Math.pow((shape.getBoundsInParent().getCenterY() - car1.getCenterY()), 2)) - car1.getRadius();
                            if (projected >= 0) {
                                cSensor.setStroke(Color.RED);
                                touched = true;
                                intersections.add(projected);
                            } 

                        }

                    }
                    
                    if(touched){
                        Collections.sort(intersections);
                        cSensor.projectedLength.setValue(intersections.get(0));
                    }

                    if (!touched) {
                        cSensor.setStroke(Color.GREEN);
                        cSensor.projectedLength.setValue(cSensor.length - car1.getRadius());

                    }
                }
            }
        };

        timer.start();

    }

    public static void main(String[] args) {
        launch(args);
    }

}
